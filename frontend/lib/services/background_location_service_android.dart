import 'dart:async';
import 'dart:developer';
import 'dart:ui';
import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:geolocator/geolocator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/driver_location.dart';
import '../services/api_service.dart';
import '../config/app_config.dart';

class BackgroundLocationServiceAndroid {
  static const String _isRunningKey = 'background_service_running';
  static const String _intervalKey = 'background_service_interval';
  static const String _cpfKey = 'driver_cpf';

  /// Inicia o servi√ßo de background
  static Future<void> startService() async {
    final service = FlutterBackgroundService();
    final isRunning = await service.isRunning();
    
    if (!isRunning) {
      service.startService();
      await _saveServiceState(true);
    }
  }
  
  /// Para o servi√ßo de background
  static Future<void> stopService() async {
    final service = FlutterBackgroundService();
    final isRunning = await service.isRunning();
    
    if (isRunning) {
      service.invoke('stop');
      await _saveServiceState(false);
    }
  }
  
  /// Verifica se o servi√ßo est√° rodando
  static Future<bool> isServiceRunning() async {
    final service = FlutterBackgroundService();
    return service.isRunning();
  }
  
  /// Atualiza o intervalo do servi√ßo
  static Future<void> updateInterval(int seconds) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_intervalKey, seconds);
    
    // Se o servi√ßo estiver rodando, reinicia com novo intervalo
    if (await isServiceRunning()) {
      await stopService();
      await Future.delayed(const Duration(seconds: 1));
      await startService();
    }
  }
  
  /// Obt√©m o intervalo atual
  static Future<int> getCurrentInterval() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(_intervalKey) ?? AppConfig.defaultBackgroundInterval;
  }
  
  /// Salva o estado do servi√ßo
  static Future<void> _saveServiceState(bool isRunning) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isRunningKey, isRunning);
  }
  
  /// Verifica se o servi√ßo estava rodando antes
  static Future<bool> wasServiceRunning() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isRunningKey) ?? false;
  }
  
  /// Salva o CPF do motorista
  static Future<void> saveCpf(String cpf) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_cpfKey, cpf);
  }
  
  /// Obt√©m o CPF salvo
  static Future<String> getSavedCpf() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_cpfKey) ?? '';
  }
  
  /// Salva o status da viagem ativa
  static Future<void> setActiveTripStatus(bool hasActiveTrip) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('has_active_trip', hasActiveTrip);
  }
  
  /// Verifica se h√° viagem ativa
  static Future<bool> hasActiveTrip() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('has_active_trip') ?? false;
  }
}

/// Ponto de entrada do servi√ßo de background para Android
@pragma('vm:entry-point')
void onStart(ServiceInstance service) async {
  DartPluginRegistrant.ensureInitialized();
  
  // Lida com eventos do servi√ßo (parar, etc.)
  service.on('stop').listen((event) {
    service.stopSelf();
  });
  

  // Contadores para estat√≠sticas
  int successCount = 0;
  int errorCount = 0;

  // Fun√ß√£o para enviar localiza√ß√£o
  Future<void> sendLocationData() async {
    try {
      // Verifica se h√° viagem ativa (obrigat√≥rio)
      final prefs = await SharedPreferences.getInstance();
      final hasActiveTrip = prefs.getBool('has_active_trip') ?? false;
      
      if (!hasActiveTrip) {
        log('Sem viagem ativa, parando rastreamento', name: 'BackgroundService');
        await BackgroundLocationServiceAndroid.stopService();
        return;
      }

      // Verifica se o servi√ßo de localiza√ß√£o est√° habilitado
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        log('Servi√ßo de localiza√ß√£o desabilitado', name: 'BackgroundService');
        return;
      }

      // Verifica permiss√µes
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
        log('Permiss√£o de localiza√ß√£o negada', name: 'BackgroundService');
        return;
      }

      // Obt√©m a localiza√ß√£o atual com configura√ß√µes espec√≠ficas de plataforma
      Position position = await Geolocator.getCurrentPosition(
        locationSettings: AndroidSettings(
          accuracy: LocationAccuracy.high,
          timeLimit: const Duration(seconds: 10),
        ),
      );

      // Obt√©m CPF salvo
      final cpf = prefs.getString('driver_cpf') ?? '';
      
      if (cpf.isEmpty) {
        log('CPF n√£o configurado, pulando envio', name: 'BackgroundService');
        return;
      }

      // Cria o objeto de localiza√ß√£o
      final location = DriverLocation(
        cpf: cpf,
        latitude: position.latitude,
        longitude: position.longitude,
        accuracy: position.accuracy,
        speed: position.speed,
        batteryLevel: null,
      );

      log('Enviando dados de localiza√ß√£o: ${location.toCreateJson()}', name: 'BackgroundService');

      // Envia para a API
      final result = await ApiService.sendDriverLocation(location);
      
      if (result != null) {
        successCount++;
        log('Localiza√ß√£o enviada com sucesso. Resposta do servidor: ${result.toJson()}', name: 'BackgroundService');
        
        // Log do sucesso (notifica√ß√£o ser√° atualizada via logs)
        log('‚úÖ Localiza√ß√£o enviada com sucesso ($successCount total)', name: 'BackgroundService');
      } else {
        errorCount++;
        log('Erro ao enviar localiza√ß√£o. A API retornou nulo.', name: 'BackgroundService');
        
        // Log do erro
        log('‚ùå Erro ao enviar localiza√ß√£o ($errorCount erros total)', name: 'BackgroundService');
      }
    } catch (e, stackTrace) {
      errorCount++;
      log('Erro cr√≠tico ao obter/enviar localiza√ß√£o', name: 'BackgroundService', error: e, stackTrace: stackTrace);
      
      // Log do erro cr√≠tico
      log('üí• Erro cr√≠tico ao enviar localiza√ß√£o ($errorCount erros total)', name: 'BackgroundService');
    }
  }
  
  // Envia a primeira localiza√ß√£o imediatamente
  await sendLocationData();
  
  // Configura o timer para envios peri√≥dicos
  int intervalSeconds = await BackgroundLocationServiceAndroid.getCurrentInterval();
  Timer.periodic(Duration(seconds: intervalSeconds), (timer) async {
    // Listener para parar o servi√ßo, tamb√©m para o timer
    service.on('stop').listen((event) {
      timer.cancel();
      service.stopSelf();
    });

    await sendLocationData();
  });
}
